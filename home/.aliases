#!/bin/bash
function cdg() {
    cd ~/Workspace/go/src
}

function flamenco() {
    cd ~/Documents/Guitar/Flamenco
}

## This changes cd to be cd then ls -lah. I found this here: https://askubuntu.com/questions/16106/how-can-i-create-an-alias-for-cd-and-ls
function cd() {
    	new_directory="$*";
    	if [ $# -eq 0 ]; then 
		new_directory=${HOME};
	fi;
	builtin cd "${new_directory}" && ls -lah
}

## This changed directories to desktop
function desk() {
        cd ~/Desktop/
}
function mark {
    export $1=`pwd`;
} 
## when I want to remember a directory, I can just type, e.g. `mark there` then to change back to it I type `cd $there`

function trash {
        mv -fv $1 ~/.Trash
}
function whatatune {
~/Dropbox/Music/whatatune/Bash/downloadtags.sh
}

function playdesk() {
        #This function will play music files on the desktop. Or, more specifically, it will play a list of the files matched by the regular expression [.]m
        cd ~/Desktop/
        playlist=$(mktemp ${TMPDIR:-/tmp}/files.XXXXXX) #{} expand the variable so the path of TMPDIR is actually used. #where is this file stored??
        ls | grep [.]m > $playlist
        while read SONG
        do
                echo ""
                echo "playing $SONG"
                ffplay -showmode 1 -window_title "Desktop Playlist" -autoexit "$SONG"
        done < $playlist
        #for i in ./*.m4a; do ffplay -nodisp -autoexit "$i"; done #this is the original one liner I wanted to create. The only probably was that it won't play mp3s.
}

function playmusic() {
        #This function will play music files in the current folder. Or, more specifically, it will play a list of the files matched by the regular expression [.]m
        playlist=$(mktemp ${TMPDIR:-/tmp}/files.XXXXXX) #{} expand the variable so the path of TMPDIR is actually used. #where is this file stored??
        ls | grep [.]m > $playlist
        while read SONG
        do
                echo ""
                echo "playing $SONG"
                ffplay -showmode 1 -window_title "Desktop Playlist" -autoexit "$SONG"
        done < $playlist
        #for i in ./*.m4a; do ffplay -nodisp -autoexit "$i"; done #this is the original one liner I wanted to create. The only probably was that it won't play mp3s.
}

function playvids() {
        #This function will play videos recursivly
        playlist=$(mktemp ${TMPDIR:-/tmp}/files.XXXXXX)
        ls | grep [.]m > $playlist
        while read VIDEO
        do
                echo ""
                echo "playing $VIDEO"
                ffplay -showmode 0 -window_title "Video Playlist" -autoexit "$VIDEO"
        done < $playlist
}

function trim {
  if (( $# == 0 )); then
  # if [[ $# -eq 0 ]]; then
    echo "trim takes 3 arguments:"
    echo "1. input file"
    echo "2. start time"
    echo "3. finish time"
    return
  elif [ -f ./trimmed_$1 ]; then
    read -rsp $"trimmed_$1 exists. Press any key to delete and continue...\n" -n1 key
    rm ./trimmed_$1
  fi
  if (( $# == 2 )); then
    ffmpeg -i "$1" -ss $2 -c copy "trimmed_$1"
  else
    ffmpeg -i "$1" -ss $2 -c copy -to $3 "trimmed_$1"
  fi
}

function p-dl {
        # takes one argument - URL
        youtube-dl -o "./%(extractor)s/%(title)s.%(ext)s" $1
        # TODO: then touch file to update date edited.
}

function g() {
	    git "$@"
      if ! [[ $1 == "st" || $1 == "status" ]]; then
        git status
      fi
      ls -lah
}

# jesi commands
function jesit {
      # runs jesi tests on specific file passed in 
      gnome-terminal -x bash -c "cd ~/Workspace/JESI/jesi-functional-tests; npm test -- $1; read -p 'Press [Enter] key to quit...'"
}
function t {
  if [[ -z "$CURRENT_TEST" ]]; then
    read -p "Which file do you want to test? " CURRENT_TEST
  else
    echo "CURRENT_TEST is set to $CURRENT_TEST"
  fi
  jesit $CURRENT_TEST
} 
