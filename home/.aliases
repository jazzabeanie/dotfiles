#!/bin/bash

echo "use \`untar\` to unzip .tar.gz"
# echo "use \`desksync\` to sync the desktop to the Samsung s7 edge"
echo "\`sha256 FILE\` to generate a sha256 hash of a file"
echo "run \`ssh -p 4810 10.1.1.11\` to connect to Lenovo x201. Run ifconfig on the lenovo to check the IP. edit /etc/ssh/sshd_config to see the port and other settings"
echo ""
echo "If you are in tmux, here are some useful commands:"
echo "  <prefix>s - interactivly switch between sessions"
echo "  <prefix>z - zoom in to current windows"
echo "  <prefix>( and <previx>) - move to previous or next session"
echo "  <prefix>p - chane to previous window"
echo "  <prefix>P - chane to previous pane (set in ~/.tmux.conf)"
echo "  <prefix>c - create new window in current session"
echo "  <prefix>w - choose window from list"
echo "  :break-pane - break the current pane out into it's own window"
echo "  <prefix>, - rename current window"
echo "  <prefix>{ - swap current pane with another (useful if you want to move a particular pane as <prefix>CTRL+o rearranges everything)"
echo "    alternatively <prefix>q to see pane numbers then <prefix>:swap-pane -s 3 -t 5"

# to use visidata as the pager app in psql, export this before running psql `export PAGER='vd --filetype=tsv --delimiter="|" --undo=true --header=1 -'`

## This changes cd to be cd then ls -lah. I found this here: https://askubuntu.com/questions/16106/how-can-i-create-an-alias-for-cd-and-ls
function cd() {
  new_directory="$*";
  if [ $# -eq 0 ]; then 
		new_directory=${HOME};
	fi;
	builtin cd "${new_directory}" && ls -lah
}
# ## This is the equivalent for zoxide:
# TODO: make this work:
# function z() {
#   new_directory="$*";
# 	builtin z "${new_directory}" && ls -lah
# }

## This changed directories to desktop
function desk() {
        cd ~/Desktop/
}
function mark {
    export $1=`pwd`;
} 
## when I want to remember a directory, I can just type, e.g. `mark there` then to change back to it I type `cd $there`

function trash {
        mv -fv $1 ~/.Trash
}
function whatatune {
~/Dropbox/Music/whatatune/Bash/downloadtags.sh
}

function playdesk() {
        #This function will play music files on the desktop. Or, more specifically, it will play a list of the files matched by the regular expression [.]m
        cd ~/Desktop/
        playlist=$(mktemp ${TMPDIR:-/tmp}/files.XXXXXX) #{} expand the variable so the path of TMPDIR is actually used. #where is this file stored??
        ls | grep [.]m > $playlist
        while read SONG
        do
                echo ""
                echo "playing $SONG"
                ffplay -showmode 1 -window_title "Desktop Playlist" -autoexit "$SONG"
        done < $playlist
        #for i in ./*.m4a; do ffplay -nodisp -autoexit "$i"; done #this is the original one liner I wanted to create. The only probably was that it won't play mp3s.
}

function playmusic() {
        #This function will play music files in the current folder. Or, more specifically, it will play a list of the files matched by the regular expression [.]m
        playlist=$(mktemp ${TMPDIR:-/tmp}/files.XXXXXX) #{} expand the variable so the path of TMPDIR is actually used. #where is this file stored??
        ls | grep [.]m > $playlist
        while read SONG
        do
                echo ""
                echo "playing $SONG"
                ffplay -showmode 1 -window_title "Desktop Playlist" -autoexit "$SONG"
        done < $playlist
        #for i in ./*.m4a; do ffplay -nodisp -autoexit "$i"; done #this is the original one liner I wanted to create. The only probably was that it won't play mp3s.
}

function playvids() {
        #This function will play videos recursivly
        playlist=$(mktemp ${TMPDIR:-/tmp}/files.XXXXXX)
        ls | grep [.]m > $playlist
        while read VIDEO
        do
                echo ""
                echo "playing $VIDEO"
                ffplay -showmode 0 -window_title "Video Playlist" -autoexit "$VIDEO"
        done < $playlist
}

function ffmpeg-trim {
  if (( $# < 2 )) || (( $# > 4 )); then
    echo "ffmpeg-trim takes at least 2 arguments:"
    echo "1.    input file"
    echo "2.    start time"
    echo "[3].  finish time. if not provided, will trim to the end."
    echo "[4].  timmed filename. if not provided, original will be overwritten"
    echo ""
    echo "Time can be privded as number of seconds, or [HH:]MM:SS."
    echo "Seconds expressed as a decimal are suppored in both cases"
    echo "See 'man ffmpeg-utils' and search for 'Time duration' for more info"
    return
  elif (( $# < 4 )); then
    # read -rsp $"No output filename give, original file will be overwritten.\nBackup will be created at /tmp\nPress any key to contines...\n" -n1 key
    cp --remove-destination ./$1 /tmp
  fi
  if (( $# == 2 )); then
    ffmpeg -i "$1" -ss $2 -c copy "$1" #FIXME: I don't think this is working. test it.
  elif (( $# == 3 )); then
    ffmpeg -i "$1" -ss $2 -c copy -to $3 "$1"
  elif (( $# == 4 )); then
    ffmpeg -i "$1" -ss $2 -c copy -to $3 "$4"
  fi
}

function ffmpeg-separate {
  if (( $# != 3 )); then
  # if [[ $# -eq 0 ]]; then
    echo "ffmpeg-separate takes 3 arguments:"
    echo "1. input file"
    echo "2. the timestamp to separate to (starting from 0)"
    echo "3. the name of the output file"
    echo "The original file will be trimmed. A backup will be put in /tmp"
    return
  fi
  if [ -f ./$1  ]; then
    cp --remove-destination "$1" /tmp
  fi
  if [ -f ./$3  ]; then
    echo "$3 exists. Delete and continue?[Y/n]"
    read answer
    if [ "$answer" = "Y" ]; then
      cp --remove-destination "$3" /tmp
      rm ./$3
    else
      echo "script cancelled"
      return
    fi
  fi
  ffmpeg-trim "$1" 0 "$2" "$3"
  ffmpeg-trim "$1" "$2"
}

function p-sync {
    # leave trailing / on the source to copy only the contents, not the source folder itself.
    rsync -v --size-only -r ~/Downloads/p/ /Volumes/Elements/
    # rsync -v --size-only -r ~/Downloads/p/ /Volumes/c_issue/Video/p/
}

function p-dl {
    # takes one argument - URL
    youtube-dl -o -no-mtime "./%(title)s.%(ext)s" $1
}

function g() {
	    git "$@"
      if ! [[ $1 == "st" || $1 == "status" || $1 == "u" ]]; then
        git status
      fi
      # ls -lah
}

# jesi commands
function jesit {
  if [[ $# -eq 0 ]]; then
    echo "jesit will run 'npm test -- $1', you must pass it the name of a test file to run."
  else
    # runs jesi tests on specific file passed in 
    gnome-terminal -x bash -c "cd ~/Workspace/JESI/jesi-functional-tests; npm test -- $1; read -p 'Press [Enter] key to quit...'"
  fi
}

function t {
  if [[ -z "$CURRENT_TEST" ]]; then
    read -p "Which file do you want to test? " CURRENT_TEST
  else
    echo "CURRENT_TEST is set to $CURRENT_TEST"
  fi
  jesit $CURRENT_TEST
} 

function untar {
  if (( $# == 0 )); then
  # if [[ $# -eq 0 ]]; then
    echo "untar takes 1 argument: the *.tar.gz file to unzip"
    return
  fi
  tar -xvzf "$@"
}

function sha256 {
  if (( $# == 0 )); then
  # if [[ $# -eq 0 ]]; then
    echo "sha256 takes 1 argument: the file to hash"
    return
  fi
  openssl dgst -sha256 "$@"
}

function desksync {
  if (( $# == 0 )); then
    echo "desksync takes 1 argument - the host running the server to sync to."
    echo 'it will run `rsync --size-only -r ~/Desktop HOST:/sdcard/`'
    echo 'and save to Main Storage/Desktop on the Samsung'
    return
  fi
  # should I have this function take another argument in case I want to copy a different source?
  rsync -e 'ssh -p 2222' --size-only -r ~/Desktop $1:/sdcard/
}

function spleeter {
  if (( $# == 0 )); then
    echo "I like to use spleeter like so:"
    echo "spleeter separate -i INPUT -p spleeter:5stems -o OUTPUT"
    echo ""
    echo "Here are the stem options:"
    echo "  Vocals (singing voice) / accompaniment separation (2 stems)"
    echo "  Vocals / drums / bass / other separation (4 stems)"
    echo "  Vocals / drums / bass / piano / other separation (5 stems)"
    echo ""
    echo "Normal program output follows:"
    echo ""
  fi
  /Users/jaredjohnston/opt/miniconda3/bin/spleeter "$@"
}

function lsvim {
  ls -lah | vim -
}

function song-dl {
  echo "warning: this function doesn't support relative directories currently."
  echo "If no output was provided, it will download to ~/Workspace/play_music."
  echo "If a relative was provided, it will be relative to this directory."
  echo ""
  (builtin cd ~/Workspace/play_music/ && pipenv run python download_song.py "$@")
  # if (( $# == 0 )); then
}

function reverse-mouse {
  xinput set-prop pointer:"Logitech G300s Optical Gaming Mouse" "libinput Natural Scrolling Enabled" 1
  xinput set-prop pointer:"PixArt Dell MS116 USB Optical Mouse" "libinput Natural Scrolling Enabled" 1
  xinput set-prop pointer:"PixArt Microsoft USB Optical Mouse" "libinput Natural Scrolling Enabled" 1
}

function pbcopy {
if [ "$(uname -s)" = "Linux" ]; then
  xclip -sel clip $@
else
  pbcopy $@
fi
}
